plugins {
	id 'java'
	id "checkstyle"
	id "com.diffplug.spotless" version "6.11.0"
}


group 'io.sui'
version '0.1.0-SNAPSHOT'

repositories {
	mavenCentral()
}

dependencies {
	// https://mvnrepository.com/artifact/com.google.guava/guava
	implementation 'com.google.guava:guava:31.1-jre'
	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	implementation 'com.google.code.gson:gson:2.10'
	// https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
	implementation 'com.squareup.okhttp3:okhttp:4.10.0'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

test {
	useJUnitPlatform()
}

checkstyle {
	toolVersion = checkstyleVersion
	// default checkstyle config -- specific to your team agreement
	configFile = project(":").file("config/checkstyle/google_checks.xml")
	// Google style (idiosyncratic to Google):
	// configFile = project(":").file("config/checkstyle/google_checks.xml")
	// SUN style (closest to modern Java styles) -- the basis for this project:
	// configFile = project(":").file("config/checkstyle/sun_checks.xml")
}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// Use the default importOrder configuration

		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat("1.7")
		// fix formatting of type annotations
		formatAnnotations()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		licenseHeaderFile project(":").file("config/spotless/java.license")
		importOrder()

		removeUnusedImports()

	}
}

task docs(type: Javadoc) {
	source = sourceSets.main.allJava
}
